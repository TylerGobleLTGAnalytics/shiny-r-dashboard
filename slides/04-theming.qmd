---
title: "Shiny Dashboards<br/>Theming"
author: "Colin Rundel"
format: 
  revealjs:
    logo: images/shiny.png
    footer: "posit::conf 2023 - Shiny Dashboards"
    slide-number: true
    highlight-style: a11y
    theme: [default, custom.scss]
    self-contained: true
revealjs-plugins:
  - revealjs-text-resizer
execute:
  echo: true
title-slide-attributes:
    data-background-image: "images/Hyatt-Regency-Chicago.webp"
    data-background-size: cover
    data-background-opacity: "0.33"
---

```{r setup}
#| include: false
library(shiny)
library(tidyverse)

knitr::opts_knit$set(root.dir = here::here())
```

## Shiny & bootstrap

The interface provided by Shiny is based on the html elements, styling, and javascript provided by the [Bootstrap library](https://getbootstrap.com/).

As we've seen so far, knowing the specifics of Bootstrap are not needed for working with Shiny - but understanding some of its conventions goes a long way to helping you customize the elements of your app (via custom CSS and other components).

This is not the only place that Bootstrap shows up in the R ecosystem - e.g. both RMarkdown and Quarto html documents use Bootstrap for styling as well.


## shinydashboard limitations

The html interface elements in this package are based on a specific version of a style template called AdminLTE (v2) which is in turn based on Bootstrap (v3). Because of this additional template layer (and its bootstrap version dependency) we don't have the flexibility to leverage bootstrap based theming using `bslib`.

Therefore theming options are limited to

- Using one of the builtin color themes via the `skin` argument to `dashboardPage()`

- Including [custom CSS](https://rstudio.github.io/shinydashboard/appearance.html#css)

- Make use of the [fresh](https://dreamrs.github.io/fresh/index.html) package

::: aside
For those interested in a dashboard package using the latest AdminLTE template can take a look at [bs4Dash](https://rinterface.github.io/bs4Dash/index.html)
:::

## Demo 08 - shinydashboard skins

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo08.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|7,8"
#| file: "demos/demo08.R"
```


## bslib

The bslib R package provides a modern UI toolkit for Shiny and R Markdown based on Bootstrap. It facilitates:

* **Custom theming of Shiny apps and R Markdown documents.**
   * Apps can even be themed interactively in real-time.
* Use of **modern versions of Bootstrap** and Bootswatch
   * Shiny and R Markdown currently default to Bootstrap 3 and may continue to do so to maintain backwards compatibility.
* Creation of delightful and customizable Shiny dashboards (next session!)



## Bootswatch

Due to the ubiquity of Bootstrap a large amount of community effort has gone into developing custom themes - a large free collection of these are available at [bootswatch.com/](https://bootswatch.com/).

<iframe data-src="https://bootswatch.com/" width="100%" height="450px" style="border:1px solid;border-radius: 5px;" data-external="1">
</iframe>



## Demo 09 - Real-time theming

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo09.Rmd`
:::
````{.markdown code-line-numbers="|18-20|18-20,4-6"}
---
title: "Demo 09 - Dynamic theming"
output: 
  flexdashboard::flex_dashboard:
    theme: 
      version: 4
runtime: shiny
---

```{{r global}}
library(tidyverse)
library(flexdashboard)
ggplot2::theme_set(ggplot2::theme_bw())

d = readr::read_csv(here::here("data/weather.csv"))
```

```{{r}}
bslib::bs_themer()
```

```{{r}}
d_vars = d |>
  select(where(is.numeric)) |>
  names()

d_city = reactive({
  d |>
    filter(city %in% input$city)
})
```

Col {data-width=800}
-------------------------------------

###

```{{r}}
selectInput(
  "city", "Select a city",
  choices = c("Chicago", "Durham", "Sedona", "New York", "Los Angeles")
)

renderPlot({
  d_city() |>
    ggplot(aes(x=time, y=temp)) +
    geom_line()
})
```

Col {data-width=200}
-------------------------------------

### Min temperature 

```{{r}}
renderGauge({
  gauge(
    min(d_city()$temp),
    min = 0, max=120, symbol = "째F",
    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))
  )
})
```

### Max temperature

```{{r}}
renderGauge({
  gauge(
    max(d_city()$temp),
    min = 0, max=120, symbol = "째F",
    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))
  )
})
```

### Avg temperature

```{{r}}
renderValueBox({
  avg = mean(d_city()$temp) |> round(1)
  valueBox(
    avg,
    caption = "Avg temp",
    icon = "fa-thermometer-half",
    color = case_when(
      avg >= 0 & avg < 50 ~ "warning",
      avg >=50 & avg < 90 ~ "success",
      avg >=90 & avg < 120 ~ "danger"
    )
  )
})
```

````

## `bs_theme()`

Provides a high level interface to adjusting the theme for an entire Shiny app,

* Change bootstrap version via `version` argument

* Pick a bootswatch theme via `bootswatch` argument

* Adjust basic color palette (`bg`, `fg`, `primary`, `secondary`, etc.)

* Adjust fonts (`base_font`, `code_font`, `heading_font`, `font_scale`)

* and more

The object returned by `bs_theme()` can be passed to the `theme` argument of `fluidPage()` and similar page UI elements.

For flexdashboard the arguments are passed in via the front matter under `theme:`.


## thematic

> Simplified theming of ggplot2, lattice, and {base} R graphics. In addition to providing a centralized approach to styling R graphics, thematic also enables automatic styling of R plots in Shiny, R Markdown, and RStudio.

In the case of our flexdashboard (or other shiny app), all we need to do is to include a call to `thematic_shiny()` before the app is loaded. 

- Using the value `"auto"` will attempt to resolve the `bg`, `fg`, `accent`, or `font` values at plot time.


## Demo 10 - thematic

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo10.Rmd`
:::
````{.markdown code-line-numbers="|18-21"}
---
title: "Demo 10 - thematic"
output: 
  flexdashboard::flex_dashboard:
    theme: 
      version: 4
runtime: shiny
---

```{{r global}}
library(tidyverse)
library(flexdashboard)
ggplot2::theme_set(ggplot2::theme_bw())

d = readr::read_csv(here::here("data/weather.csv"))
```

```{{r}}
bslib::bs_themer()
thematic::thematic_shiny(bg = "auto", fg = "auto", font = "auto")
```

```{{r}}
d_vars = d |>
  select(where(is.numeric)) |>
  names()

d_city = reactive({
  d |>
    filter(city %in% input$city)
})
```

Col {data-width=800}
-------------------------------------

###

```{{r}}
selectInput(
  "city", "Select a city",
  choices = c("Chicago", "Durham", "Sedona", "New York", "Los Angeles")
)

renderPlot({
  d_city() |>
    ggplot(aes(x=time, y=temp)) +
    geom_line()
})
```

Col {data-width=200}
-------------------------------------

### Min temperature 

```{{r}}
renderGauge({
  gauge(
    min(d_city()$temp),
    min = 0, max=120, symbol = "째F",
    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))
  )
})
```

### Max temperature

```{{r}}
renderGauge({
  gauge(
    max(d_city()$temp),
    min = 0, max=120, symbol = "째F",
    gaugeSectors(success=c(60,90), warning=c(0,50), danger=c(90,120))
  )
})
```

### Avg temperature

```{{r}}
renderValueBox({
  avg = mean(d_city()$temp) |> round(1)
  valueBox(
    avg,
    caption = "Avg temp",
    icon = "fa-thermometer-half",
    color = case_when(
      avg >= 0 & avg < 50 ~ "warning",
      avg >=50 & avg < 90 ~ "success",
      avg >=90 & avg < 120 ~ "danger"
    )
  )
})
```
````

## Your turn - Exercise 07

Using the code provided in `exercises/ex07.Rmd` add the following call to the app and try running the dashboard.

```r
thematic::thematic_shiny(bg = "auto", fg = "auto", font = "auto")
```

- Try changing the main theme, the background and foreground colors

- Try changing the accent colors

- Try changing the fonts



